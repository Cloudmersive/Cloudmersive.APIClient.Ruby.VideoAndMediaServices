=begin
#videoapi

#The video APIs help you convert, encode, and transcode videos.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'date'

module CloudmersiveVideoApiClient
  # Result of retrieving information about a video or audio file
  class MediaInformation
    # True if the operation was successful, false otherwise
    attr_accessor :successful

    # The file's short format name
    attr_accessor :file_format

    # The file's full format name
    attr_accessor :file_format_full

    # A list of the file's valid formats
    attr_accessor :valid_file_formats

    # The video's width, if file is a video
    attr_accessor :width

    # The video's height, if file is a video
    attr_accessor :height

    # The file's size in bytes
    attr_accessor :size

    # The file's bit rate
    attr_accessor :bit_rate

    # The file's duration in seconds
    attr_accessor :duration

    # The file's media start time
    attr_accessor :start_time

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'successful' => :'Successful',
        :'file_format' => :'FileFormat',
        :'file_format_full' => :'FileFormatFull',
        :'valid_file_formats' => :'ValidFileFormats',
        :'width' => :'Width',
        :'height' => :'Height',
        :'size' => :'Size',
        :'bit_rate' => :'BitRate',
        :'duration' => :'Duration',
        :'start_time' => :'StartTime'
      }
    end

    # Attribute type mapping.
    def self.swagger_types
      {
        :'successful' => :'BOOLEAN',
        :'file_format' => :'String',
        :'file_format_full' => :'String',
        :'valid_file_formats' => :'Array<String>',
        :'width' => :'Integer',
        :'height' => :'Integer',
        :'size' => :'Integer',
        :'bit_rate' => :'Integer',
        :'duration' => :'Float',
        :'start_time' => :'Float'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      return unless attributes.is_a?(Hash)

      # convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h| h[k.to_sym] = v }

      if attributes.has_key?(:'Successful')
        self.successful = attributes[:'Successful']
      end

      if attributes.has_key?(:'FileFormat')
        self.file_format = attributes[:'FileFormat']
      end

      if attributes.has_key?(:'FileFormatFull')
        self.file_format_full = attributes[:'FileFormatFull']
      end

      if attributes.has_key?(:'ValidFileFormats')
        if (value = attributes[:'ValidFileFormats']).is_a?(Array)
          self.valid_file_formats = value
        end
      end

      if attributes.has_key?(:'Width')
        self.width = attributes[:'Width']
      end

      if attributes.has_key?(:'Height')
        self.height = attributes[:'Height']
      end

      if attributes.has_key?(:'Size')
        self.size = attributes[:'Size']
      end

      if attributes.has_key?(:'BitRate')
        self.bit_rate = attributes[:'BitRate']
      end

      if attributes.has_key?(:'Duration')
        self.duration = attributes[:'Duration']
      end

      if attributes.has_key?(:'StartTime')
        self.start_time = attributes[:'StartTime']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          successful == o.successful &&
          file_format == o.file_format &&
          file_format_full == o.file_format_full &&
          valid_file_formats == o.valid_file_formats &&
          width == o.width &&
          height == o.height &&
          size == o.size &&
          bit_rate == o.bit_rate &&
          duration == o.duration &&
          start_time == o.start_time
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Fixnum] Hash code
    def hash
      [successful, file_format, file_format_full, valid_file_formats, width, height, size, bit_rate, duration, start_time].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.swagger_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BOOLEAN
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        temp_model = CloudmersiveVideoApiClient.const_get(type).new
        temp_model.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end
end
