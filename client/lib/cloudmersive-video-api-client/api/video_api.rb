=begin
#videoapi

#The video APIs help you convert, encode, and transcode videos.

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.4.14

=end

require 'uri'

module CloudmersiveVideoApiClient
  class VideoApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Convert Video to Animated GIF format.
    # Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video's aspect ratio.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @option opts [DateTime] :start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format.
    # @option opts [DateTime] :time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes.
    # @return [String]
    def video_convert_to_gif(input_file, opts = {})
      data, _status_code, _headers = video_convert_to_gif_with_http_info(input_file, opts)
      data
    end

    # Convert Video to Animated GIF format.
    # Automatically detect video file format and convert it to animated GIF format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB. Default height is 250 pixels, while preserving the video&#39;s aspect ratio.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to 250 pixels.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to 250 pixels.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to 24 frames per second.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @option opts [DateTime] :start_time Optional; Specify the desired starting time of the GIF video in TimeSpan format.
    # @option opts [DateTime] :time_span Optional; Specify the desired length of the GIF video in TimeSpan format. Limit is 30 minutes.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def video_convert_to_gif_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.video_convert_to_gif ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling VideoApi.video_convert_to_gif"
      end
      # resource path
      local_var_path = '/video/convert/to/gif'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'fileUrl'] = opts[:'file_url'] if !opts[:'file_url'].nil?
      header_params[:'maxWidth'] = opts[:'max_width'] if !opts[:'max_width'].nil?
      header_params[:'maxHeight'] = opts[:'max_height'] if !opts[:'max_height'].nil?
      header_params[:'preserveAspectRatio'] = opts[:'preserve_aspect_ratio'] if !opts[:'preserve_aspect_ratio'].nil?
      header_params[:'frameRate'] = opts[:'frame_rate'] if !opts[:'frame_rate'].nil?
      header_params[:'extendProcessingTime'] = opts[:'extend_processing_time'] if !opts[:'extend_processing_time'].nil?
      header_params[:'startTime'] = opts[:'start_time'] if !opts[:'start_time'].nil?
      header_params[:'timeSpan'] = opts[:'time_span'] if !opts[:'time_span'].nil?

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#video_convert_to_gif\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Convert Video to MOV format.
    # Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
    # @option opts [Integer] :quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @return [String]
    def video_convert_to_mov(input_file, opts = {})
      data, _status_code, _headers = video_convert_to_mov_with_http_info(input_file, opts)
      data
    end

    # Convert Video to MOV format.
    # Automatically detect video file format and convert it to MOV format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
    # @option opts [Integer] :quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def video_convert_to_mov_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.video_convert_to_mov ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling VideoApi.video_convert_to_mov"
      end
      # resource path
      local_var_path = '/video/convert/to/mov'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'fileUrl'] = opts[:'file_url'] if !opts[:'file_url'].nil?
      header_params[:'maxWidth'] = opts[:'max_width'] if !opts[:'max_width'].nil?
      header_params[:'maxHeight'] = opts[:'max_height'] if !opts[:'max_height'].nil?
      header_params[:'preserveAspectRatio'] = opts[:'preserve_aspect_ratio'] if !opts[:'preserve_aspect_ratio'].nil?
      header_params[:'frameRate'] = opts[:'frame_rate'] if !opts[:'frame_rate'].nil?
      header_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      header_params[:'extendProcessingTime'] = opts[:'extend_processing_time'] if !opts[:'extend_processing_time'].nil?

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#video_convert_to_mov\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Convert Video to MP4 format.
    # Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
    # @option opts [Integer] :quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @return [String]
    def video_convert_to_mp4(input_file, opts = {})
      data, _status_code, _headers = video_convert_to_mp4_with_http_info(input_file, opts)
      data
    end

    # Convert Video to MP4 format.
    # Automatically detect video file format and convert it to MP4 format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
    # @option opts [Integer] :quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def video_convert_to_mp4_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.video_convert_to_mp4 ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling VideoApi.video_convert_to_mp4"
      end
      # resource path
      local_var_path = '/video/convert/to/mp4'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'fileUrl'] = opts[:'file_url'] if !opts[:'file_url'].nil?
      header_params[:'maxWidth'] = opts[:'max_width'] if !opts[:'max_width'].nil?
      header_params[:'maxHeight'] = opts[:'max_height'] if !opts[:'max_height'].nil?
      header_params[:'preserveAspectRatio'] = opts[:'preserve_aspect_ratio'] if !opts[:'preserve_aspect_ratio'].nil?
      header_params[:'frameRate'] = opts[:'frame_rate'] if !opts[:'frame_rate'].nil?
      header_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      header_params[:'extendProcessingTime'] = opts[:'extend_processing_time'] if !opts[:'extend_processing_time'].nil?

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#video_convert_to_mp4\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Convert Video to WEBM format.
    # Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
    # @option opts [Integer] :quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @return [String]
    def video_convert_to_webm(input_file, opts = {})
      data, _status_code, _headers = video_convert_to_webm_with_http_info(input_file, opts)
      data
    end

    # Convert Video to WEBM format.
    # Automatically detect video file format and convert it to WEBM format. Supports many input video formats, including AVI, ASF, FLV, MP4, MPEG/MPG, Matroska/WEBM, 3G2, OGV, MKV, M4V and MOV. Uses 1 API call per 10 MB of file size. Maximum output file size is 50GB.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @option opts [Integer] :max_width Optional; Maximum width of the output video, up to the original video width. Defaults to original video width.
    # @option opts [Integer] :max_height Optional; Maximum height of the output video, up to the original video width. Defaults to original video height.
    # @option opts [BOOLEAN] :preserve_aspect_ratio Optional; If false, the original video&#39;s aspect ratio will not be preserved, allowing customization of the aspect ratio using maxWidth and maxHeight, potentially skewing the video. Default is true.
    # @option opts [Integer] :frame_rate Optional; Specify the frame rate of the output video. Defaults to original video frame rate.
    # @option opts [Integer] :quality Optional; Specify the quality of the output video, where 100 is lossless and 1 is the lowest possible quality with highest compression. Default is 50.
    # @option opts [BOOLEAN] :extend_processing_time Optional; If true, will allow additional processing time for the video file conversion, using one API call per additional minute over the 5 minute default processing time, up to a maximum of 25 total minutes. This is generally necessary for files larger than 500 MB or longer than 30 minutes.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def video_convert_to_webm_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.video_convert_to_webm ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling VideoApi.video_convert_to_webm"
      end
      # resource path
      local_var_path = '/video/convert/to/webm'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'fileUrl'] = opts[:'file_url'] if !opts[:'file_url'].nil?
      header_params[:'maxWidth'] = opts[:'max_width'] if !opts[:'max_width'].nil?
      header_params[:'maxHeight'] = opts[:'max_height'] if !opts[:'max_height'].nil?
      header_params[:'preserveAspectRatio'] = opts[:'preserve_aspect_ratio'] if !opts[:'preserve_aspect_ratio'].nil?
      header_params[:'frameRate'] = opts[:'frame_rate'] if !opts[:'frame_rate'].nil?
      header_params[:'quality'] = opts[:'quality'] if !opts[:'quality'].nil?
      header_params[:'extendProcessingTime'] = opts[:'extend_processing_time'] if !opts[:'extend_processing_time'].nil?

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#video_convert_to_webm\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
    # Get detailed information about a video or audio file
    # Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @return [String]
    def video_get_info(input_file, opts = {})
      data, _status_code, _headers = video_get_info_with_http_info(input_file, opts)
      data
    end

    # Get detailed information about a video or audio file
    # Retrieve detailed information about a video or audio file, including format, dimensions, file size, bit rate, duration and start time. Compatible with many formats, including: AVI, ASF, FLV, GIF, MP4, MPEG/MPG, Matroska/WEBM, MOV, AIFF, ASF, CAF, MP3, MP2, MP1, Ogg, OMG/OMA, and WAV. Uses 1 API call per 10 MB of file size.
    # @param input_file Input file to perform the operation on.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :file_url Optional; URL of a video file being used for conversion. Use this option for files larger than 2GB.
    # @return [Array<(String, Fixnum, Hash)>] String data, response status code and response headers
    def video_get_info_with_http_info(input_file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: VideoApi.video_get_info ...'
      end
      # verify the required parameter 'input_file' is set
      if @api_client.config.client_side_validation && input_file.nil?
        fail ArgumentError, "Missing the required parameter 'input_file' when calling VideoApi.video_get_info"
      end
      # resource path
      local_var_path = '/video/convert/get-info'

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json', 'text/json', 'application/xml', 'text/xml'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])
      header_params[:'fileUrl'] = opts[:'file_url'] if !opts[:'file_url'].nil?

      # form parameters
      form_params = {}
      form_params['inputFile'] = input_file

      # http body (model)
      post_body = nil
      auth_names = ['Apikey']
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'String')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: VideoApi#video_get_info\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
